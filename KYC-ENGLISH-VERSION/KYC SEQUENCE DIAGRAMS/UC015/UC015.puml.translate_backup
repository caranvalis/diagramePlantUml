@startuml UC015
skinparam backgroundColor #F8FBFF
skinparam participant {
    BackgroundColor #E3F2FD
    BorderColor #1976D2
    FontColor #0D47A1
}
skinparam sequence {
    ArrowColor #1976D2
    LifeLineBackgroundColor #E8F5E8
    LifeLineBorderColor #4CAF50
}
skinparam shadowing true


title UC015 - Remplacement Document Client

' Acteurs externes
actor "Manager KYC" as Manager #LightBlue

' Couche présentation
box "Interface Utilisateur" #E8F5E8
    participant "Interface INTRA" as WebUI #90EE90
    participant "API Gateway" as Gateway #98FB98
end box

' Couche orchestration
box "Couche Orchestration" #FFF8DC
    participant "Orchestrateur\nKYC" as Orchestrator #FFE4B5
    participant "Manager\nFlux Métier" as FluxManager #F0E68C
end box

' Services métier
box "Services Métier KYC" #F0F8FF
    participant "Service\nDocument" as DocumentService #87CEEB
    participant "Service\nValidation" as ValidationService #87CEFA
    participant "Service\nVersioning" as VersioningService #4682B4
    participant "Service\nClient" as ClientService #4169E1
end box

' Services techniques
box "Services Techniques" #FDF5E6
    participant "Service\nAudit" as AuditService #DEB887
    participant "Service\nNotification" as NotificationService #D2B48C
    participant "Cache\nRedis" as CacheService #CD853F
end box

' Infrastructure
box "Infrastructure" #F5F5F5
    participant "Base de Données\nKYC" as DB #C0C0C0
    participant "Stockage\nDocuments" as Storage #A9A9A9
end box

== Accès onglet documents ==

Manager -> WebUI : Accéder onglet\n"Documents" client
activate Manager
activate WebUI

WebUI -> Gateway : GET /client/{id}/documents
activate Gateway

Gateway -> Orchestrator : accederDocumentsClient()
activate Orchestrator

Orchestrator -> FluxManager : démarrerFluxGestionDocuments()
activate FluxManager

FluxManager -> AuditService : logDébutFlux(GESTION_DOCUMENTS)
activate AuditService
AuditService -> DB : INSERT audit_flux
AuditService --> FluxManager : OK
deactivate AuditService

Orchestrator -> DocumentService : chargerDocumentsClient()
activate DocumentService

DocumentService -> DB : SELECT documents_client
activate DB
DB --> DocumentService : Liste documents
deactivate DB

DocumentService -> Storage : getMetadonnéesDocuments()
activate Storage
Storage --> DocumentService : Métadonnées complètes
deactivate Storage

DocumentService --> Orchestrator : Documents disponibles
deactivate DocumentService

Orchestrator --> Gateway : Liste documents
Gateway --> WebUI : Onglet documents
WebUI --> Manager : **Documents client**\nListe avec options

== Sélection document à remplacer ==

Manager -> WebUI : Sélectionner document\nà remplacer
WebUI -> Gateway : GET /client/{id}/document/{docId}

Gateway -> Orchestrator : selectionnerDocumentRemplacer()

Orchestrator -> DocumentService : chargerDocumentExistant()
activate DocumentService

DocumentService -> Storage : GET document
activate Storage
Storage --> DocumentService : Document chargé
deactivate Storage

DocumentService --> Orchestrator : Document disponible
deactivate DocumentService

Orchestrator --> Gateway : Document sélectionné
Gateway --> WebUI : Affichage document
WebUI --> Manager : **Document affiché**\nOption "Remplacer"

== Remplacement document ==

Manager -> WebUI : Cliquer "Remplacer\nle document"
Manager -> WebUI : Téléverser nouvelle\nversion

WebUI -> Gateway : POST /client/{id}/document/{docId}/replace

Gateway -> Orchestrator : remplacerDocument()

Orchestrator -> ValidationService : validerNouveauDocument()
activate ValidationService

ValidationService -> ValidationService : Verify taille\nfichier
ValidationService -> ValidationService : Control format\naccepté

alt Fichier trop volumineux
    ValidationService --> Orchestrator : Taille excessive
    deactivate ValidationService
    
    Orchestrator --> Gateway : Téléchargement refusé
    Gateway --> WebUI : Error taille
    WebUI --> Manager : **Error**: Fichier trop\nvolumineux - Réduire taille
    
else Taille acceptable
    ValidationService -> ValidationService : Verify integrity\nfichier
    ValidationService -> ValidationService : Analyze complétude\ncontenu
    
    alt Document incomplet
        ValidationService --> Orchestrator : Document incomplet
        deactivate ValidationService
        
        Orchestrator --> Gateway : Document invalide
        Gateway --> WebUI : Error complétude
        WebUI --> Manager : **Error**: Document incomplet\nBlocage validation
        
    else Document valide
        ValidationService --> Orchestrator : Document conforme
        deactivate ValidationService
        
        Manager -> WebUI : Validate changement
        WebUI -> Gateway : PUT /client/{id}/document/{docId}/confirm
        
        Gateway -> Orchestrator : confirmerRemplacement()
        
        ' Versioning du document existant
        Orchestrator -> VersioningService : versionnerDocumentExistant()
        activate VersioningService
        
        VersioningService -> Storage : Archive version précédente
        activate Storage
        Storage --> VersioningService : Version archivée
        deactivate Storage
        
        VersioningService -> DB : INSERT document_versions
        activate DB
        DB --> VersioningService : Version enregistrée
        deactivate DB
        
        VersioningService --> Orchestrator : Versioning effectué
        deactivate VersioningService
        
        ' Mise à jour avec nouveau document
        Orchestrator -> DocumentService : mettreAJourDocument()
        activate DocumentService
        
        DocumentService -> Storage : Save nouveau document
        activate Storage
        Storage --> DocumentService : Document sauvegardé
        deactivate Storage
        
        DocumentService -> DB : UPDATE document SET nouvelle_version
        activate DB
        DB --> DocumentService : Document mis à jour
        deactivate DB
        
        DocumentService -> CacheService : invalidateDocumentCache()
        activate CacheService
        CacheService --> DocumentService : Cache invalidé
        deactivate CacheService
        
        DocumentService --> Orchestrator : Document remplacé
        deactivate DocumentService
        
        ' Mise à jour référence client
        Orchestrator -> ClientService : mettreAJourReferencesDocuments()
        activate ClientService
        
        ClientService -> DB : UPDATE client_documents
        activate DB
        DB --> ClientService : Références mises à jour
        deactivate DB
        
        ClientService --> Orchestrator : Client actualisé
        deactivate ClientService
        
        ' Audit et notification
        Orchestrator -> AuditService : logRemplacementDocument()
        activate AuditService
        AuditService -> DB : INSERT audit_actions
        AuditService --> Orchestrator : OK
        deactivate AuditService
        
        Orchestrator -> NotificationService : notifierRemplacementDocument()
        activate NotificationService
        NotificationService --> Orchestrator : Notification envoyée
        deactivate NotificationService
        
        Orchestrator --> Gateway : Remplacement successful
        Gateway --> WebUI : Confirmation affichée
        WebUI --> Manager : **Success**: Document remplacé\nNouvelle version active
    end
end

== Finalisation ==

Orchestrator -> FluxManager : terminerFluxGestionDocuments()
FluxManager -> AuditService : logFinFlux()
activate AuditService
AuditService -> DB : UPDATE audit_flux
AuditService --> FluxManager : OK
deactivate AuditService

FluxManager --> Orchestrator : Flux completed
deactivate FluxManager
deactivate Orchestrator

deactivate Gateway
deactivate WebUI
deactivate Manager

@enduml
