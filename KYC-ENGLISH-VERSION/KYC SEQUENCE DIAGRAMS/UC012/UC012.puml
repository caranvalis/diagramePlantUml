@startuml UC012
!theme cerulean

title UC012 - Activation/Blocage Entreprise
skinparam actorStyle awesome
skinparam sequenceBoxBorderColor #1E88E5
skinparam participantBackgroundColor #E3F2FD
skinparam lifeline {
    BackgroundColor #BBDEFB
}

' Acteurs externes
actor "Analyste Conformité" as Analyste #LightBlue

' Couche présentation
box "Interface Utilisateur" #E8F5E8
    participant "Interface INTRA" as WebUI #90EE90
    participant "API Gateway" as Gateway #98FB98
end box

' Couche orchestration
box "Couche Orchestration" #FFF8DC
    participant "Orchestrateur\nKYC" as Orchestrator #FFE4B5
    participant "Manager\nFlux Métier" as FluxManager #F0E68C
end box

' Services métier
box "Services Métier KYC" #F0F8FF
    participant "Service\nEntreprise" as EntrepriseService #87CEEB
    participant "Service\nCompte" as CompteService #4682B4
    participant "Service\nStatut" as StatutService #4169E1
    participant "Service\nValidation" as ValidationService #87CEFA
end box

' Services techniques
box "Services Techniques" #FDF5E6
    participant "Service\nAudit" as AuditService #DEB887
    participant "Service\nNotification" as NotificationService #D2B48C
    participant "Cache\nRedis" as CacheService #CD853F
end box

' Infrastructure
box "Infrastructure" #F5F5F5
    participant "Base de Données\nKYC" as DB #C0C0C0
    participant "System\nComptes CBS" as CBS #A9A9A9
end box

== Accès profil entreprise ==

Analyste -> WebUI : Accéder profil entreprise\npour modification statut
activate Analyste
activate WebUI

WebUI -> Gateway : GET /entreprise/{id}/profil
activate Gateway

Gateway -> Orchestrator : accederProfilEntreprise()
activate Orchestrator

Orchestrator -> FluxManager : démarrerFluxGestionStatutEntreprise()
activate FluxManager

FluxManager -> AuditService : logDébutFlux(GESTION_STATUT_ENTREPRISE)
activate AuditService
AuditService -> DB : INSERT audit_flux
AuditService --> FluxManager : OK
deactivate AuditService

' Récupération informations entreprise
Orchestrator -> EntrepriseService : getProfilEntreprise()
activate EntrepriseService

EntrepriseService -> CacheService : getEntrepriseInfo()
activate CacheService

alt Entreprise en cache
    CacheService --> EntrepriseService : Données trouvées
    deactivate CacheService
    
else Pas en cache
    CacheService --> EntrepriseService : Non trouvé
    deactivate CacheService
    
    EntrepriseService -> DB : SELECT entreprise_details
    activate DB
    DB --> EntrepriseService : Informations entreprise
    deactivate DB
    
    EntrepriseService -> CacheService : cacheEntrepriseInfo()
    activate CacheService
    CacheService --> EntrepriseService : Mis en cache
    deactivate CacheService
end

EntrepriseService --> Orchestrator : Profil entreprise
deactivate EntrepriseService

Orchestrator --> Gateway : Profil chargé
Gateway --> WebUI : Informations entreprise
WebUI --> Analyste : **Profil entreprise**\nStatut actuel + options modification

note over Analyste : Profil affiché avec\nstatut actuel et actions\ndisponibles (Activer/Bloquer)

== Demande changement statut ==

Analyste -> WebUI : Sélectionner action\n(Activer/Bloquer entreprise)
WebUI -> Gateway : POST /entreprise/{id}/change-statut

Gateway -> Orchestrator : changerStatutEntreprise()

' Validation des habilitations
Orchestrator -> ValidationService : validerHabilitationsAnalyste()
activate ValidationService

ValidationService -> DB : SELECT permissions_analyste
activate DB
DB --> ValidationService : Permissions vérifiées
deactivate DB

alt Habilitations insuffisantes
    ValidationService --> Orchestrator : Accès refusé
    deactivate ValidationService
    
    Orchestrator --> Gateway : Error autorisation
    Gateway --> WebUI : Permissions insuffisantes
    WebUI --> Analyste : **Error**: Droits insuffisants\npour modification statut
    
else Habilitations valides
    ValidationService --> Orchestrator : Autorisé
    deactivate ValidationService
    
    ' Vérification statut actuel
    Orchestrator -> StatutService : verifierStatutActuel()
    activate StatutService
    
    StatutService -> DB : SELECT statut_entreprise
    activate DB
    DB --> StatutService : Statut actuel
    deactivate DB
    
    alt Statut déjà à jour
        StatutService --> Orchestrator : Aucun changement requis
        deactivate StatutService
        
        Orchestrator --> Gateway : Statut inchangé
        Gateway --> WebUI : Aucune modification
        WebUI --> Analyste : **Information**: Statut déjà\nà la valeur demandée
        
        note over Analyste : Aucune action\nrequise
        
    else Changement requis
        StatutService --> Orchestrator : Changement nécessaire
        deactivate StatutService
        
        ' Identification des comptes associés
        Orchestrator -> CompteService : identifierComptesEntreprise()
        activate CompteService
        
        CompteService -> DB : SELECT comptes_entreprise
        activate DB
        DB --> CompteService : Liste comptes internes
        deactivate DB
        
        CompteService -> CBS : GET /accounts/entreprise/{id}
        activate CBS
        CBS --> CompteService : Comptes CBS
        deactivate CBS
        
        CompteService -> CompteService : Consolider liste\ncomptes complète
        CompteService --> Orchestrator : Liste comptes (${nbComptes} comptes)
        deactivate CompteService
        
        == Mise à jour statuts ==
        
        ' Mise à jour statut entreprise
        Orchestrator -> StatutService : mettreAJourStatutEntreprise()
        activate StatutService
        
        StatutService -> EntrepriseService : updateStatutEntreprise()
        activate EntrepriseService
        
        EntrepriseService -> DB : UPDATE entreprise SET statut
        activate DB
        DB --> EntrepriseService : Statut entreprise mis à jour
        deactivate DB
        
        EntrepriseService -> CacheService : invalidateEntrepriseCache()
        activate CacheService
        CacheService --> EntrepriseService : Cache invalidé
        deactivate CacheService
        
        EntrepriseService --> StatutService : Entreprise mise à jour
        deactivate EntrepriseService
        
        ' Mise à jour statuts comptes
        StatutService -> CompteService : mettreAJourStatutsComptesEntreprise()
        activate CompteService
        
        CompteService -> CompteService : Traiter chaque compte\nindividuellement
        
        loop Pour chaque compte entreprise
            CompteService -> DB : UPDATE compte SET statut
            activate DB
            
            alt Compte modifiable
                DB --> CompteService : Mise à jour OK
                deactivate DB
                
                CompteService -> CBS : PUT /account/{id}/status
                activate CBS
                
                alt CBS disponible
                    CBS --> CompteService : Statut CBS mis à jour
                    deactivate CBS
                    note right of CompteService : Compte synchronisé\navec CBS
                    
                else CBS indisponible
                    CBS --> CompteService : Error CBS
                    deactivate CBS
                    
                    CompteService -> AuditService : logErrorSyncCBS()
                    activate AuditService
                    AuditService -> DB : INSERT audit_erreurs
                    activate DB
                    DB --> AuditService : Error loggée
                    deactivate DB
                    AuditService --> CompteService : OK
                    deactivate AuditService
                    
                    note right of CompteService : Désynchronisation\nCBS détectée
                end
                
            else Compte verrouillé
                DB --> CompteService : Compte verrouillé
                deactivate DB
                
                CompteService -> AuditService : logCompteVerrouille()
                activate AuditService
                AuditService -> DB : INSERT audit_anomalies
                activate DB
                DB --> AuditService : Anomalie loggée
                deactivate DB
                AuditService --> CompteService : OK
                deactivate AuditService
                
                note right of CompteService : Compte verrouillé\nnon modifiable
            end
        end
        
        CompteService -> CompteService : Consolider résultats\nmise à jour
        CompteService --> StatutService : Bilan mise à jour comptes
        deactivate CompteService
        
        StatutService --> Orchestrator : Mise à jour terminée
        deactivate StatutService
        
        == Notifications et audit ==
        
        alt Toutes mises à jour réussies
            Orchestrator -> NotificationService : notifierChangementStatutEntreprise()
            activate NotificationService
            
            NotificationService -> NotificationService : Préparer notifications\nreprésentants + équipes
            NotificationService -> NotificationService : Send notifications\nchangement statut
            
            NotificationService --> Orchestrator : Notifications envoyées
            deactivate NotificationService
            
            Orchestrator -> AuditService : logChangementStatutReussi()
            activate AuditService
            AuditService -> DB : INSERT audit_actions
            activate DB
            DB --> AuditService : Action auditée
            deactivate DB
            AuditService --> Orchestrator : OK
            deactivate AuditService
            
            Orchestrator --> Gateway : Changement statut complet
            Gateway --> WebUI : Success total
            WebUI --> Analyste : **Success**: Statut entreprise\net comptes mis à jour
            
            note over Analyste : Changement statut réussi\nEntreprise + comptes synchronisés
            
        else Mises à jour partielles
            Orchestrator -> NotificationService : notifierChangementPartiel()
            activate NotificationService
            NotificationService --> Orchestrator : Notifications partielles envoyées
            deactivate NotificationService
            
            Orchestrator -> AuditService : logChangementStatutPartiel()
            activate AuditService
            AuditService -> DB : INSERT audit_anomalies
            activate DB
            DB --> AuditService : Anomalies loggées
            deactivate DB
            AuditService --> Orchestrator : OK
            deactivate AuditService
            
            Orchestrator --> Gateway : Changement partiel
            Gateway --> WebUI : Success partiel avec alertes
            WebUI --> Analyste : **Attention**: Changement partiel\nCertains comptes verrouillés
            
            note over Analyste : Actions manuelles\nrequises sur comptes\nverrouillés
        end
    end
end

== Finalisation ==

Orchestrator -> FluxManager : terminerFluxGestionStatutEntreprise()
FluxManager -> AuditService : logFinFlux()
activate AuditService
AuditService -> DB : UPDATE audit_flux
activate DB
DB --> AuditService : Flux finalisé
deactivate DB
AuditService --> FluxManager : OK
deactivate AuditService

FluxManager --> Orchestrator : Flux terminé
deactivate FluxManager
deactivate Orchestrator

deactivate Gateway
deactivate WebUI
deactivate Analyste

note over DB : Changements statut entreprise\ntracés pour audit conformité\navec gestion comptes associés

@enduml
