@startuml UC003
!theme cerulean

title UC003 - Importation Client depuis Amplitude
skinparam actorStyle awesome
skinparam sequenceBoxBorderColor #1E88E5
skinparam participantBackgroundColor #E3F2FD
skinparam lifeline {
    BackgroundColor #BBDEFB
}

' Acteurs externes
actor "Manager KYC" as Manager #LightBlue
actor "System Amplitude" as Amplitude #LightGray

' Couche présentation
box "Interface Utilisateur" #E8F5E8
    participant "Interface Web\nKYC" as WebUI #90EE90
    participant "API Gateway" as Gateway #98FB98
end box

' Couche orchestration
box "Couche Orchestration" #FFF8DC
    participant "Orchestrateur\nKYC" as Orchestrator #FFE4B5
    participant "Manager\nFlux Métier" as FluxManager #F0E68C
end box

' Services métier
box "Services Métier KYC" #F0F8FF
    participant "Service\nClient" as ClientService #87CEEB
    participant "Service\nValidation" as ValidationService #87CEFA
    participant "Service\nIntégration" as IntegrationService #4682B4
    participant "Service\nDoublon" as DoublonService #4169E1
    participant "Service\nMapping" as MappingService #6495ED
end box

' Services techniques
box "Services Techniques" #FDF5E6
    participant "Service\nAudit" as AuditService #DEB887
    participant "Service\nNotification" as NotificationService #D2B48C
    participant "Cache\nRedis" as CacheService #CD853F
end box

' Infrastructure
box "Infrastructure" #F5F5F5
    participant "Base de Données\nKYC" as DB #C0C0C0
    participant "Stockage\nDocuments" as Storage #A9A9A9
end box

== Initialisation importation ==

Manager -> WebUI : Accéder import Amplitude
activate Manager
activate WebUI

WebUI -> Gateway : GET /import/amplitude/form
activate Gateway

Gateway -> Orchestrator : initierImportAmplitude()
activate Orchestrator

Orchestrator -> FluxManager : démarrerFluxImport()
activate FluxManager

FluxManager -> AuditService : logDébutFlux(IMPORT_AMPLITUDE)
activate AuditService
AuditService -> DB : INSERT audit_flux
AuditService --> FluxManager : OK
deactivate AuditService

FluxManager --> Orchestrator : Flux initialisé
Orchestrator --> Gateway : Formulaire import
Gateway --> WebUI : Interface saisie
WebUI --> Manager : Affichage champ identifiant

note over Manager : Interface prête pour\nsaisie identifiant client

== Saisie et vérification identifiant ==

Manager -> WebUI : Saisir identifiant client Amplitude
WebUI -> Gateway : POST /import/amplitude/validate-id
note over Gateway : Identifiant client\nÀ valider

Gateway -> Orchestrator : validerIdentifiantAmplitude()

Orchestrator -> ValidationService : validerFormatIdentifiant()
activate ValidationService

ValidationService -> ValidationService : Control format\nidentifiant Amplitude
ValidationService -> ValidationService : Validate structure

alt Format identifiant valide
    ValidationService --> Orchestrator : Identifiant valide
    deactivate ValidationService
    
    ' Vérification existence dans cache
    Orchestrator -> CacheService : getClientAmplitude()
    activate CacheService
    
    alt Données en cache
        CacheService --> Orchestrator : Données client trouvées
        deactivate CacheService
        note over Orchestrator : Données récupérées\ndepuis le cache
        
    else Pas en cache
        CacheService --> Orchestrator : Non trouvé
        deactivate CacheService
        
        ' Interrogation Amplitude
        Orchestrator -> IntegrationService : interrogerAmplitude()
        activate IntegrationService
        
        IntegrationService -> Amplitude : GET /client/{id}
        activate Amplitude
        
        alt Amplitude disponible
            Amplitude --> IntegrationService : Données client
            deactivate Amplitude
            
            IntegrationService -> MappingService : mapperDonneesAmplitude()
            activate MappingService
            
            MappingService -> MappingService : Convertir format\nAmplitude vers KYC
            MappingService -> MappingService : Normaliser données
            MappingService -> MappingService : Validate mapping
            
            MappingService --> IntegrationService : Données mappées
            deactivate MappingService
            
            IntegrationService -> CacheService : cacheClientAmplitude()
            activate CacheService
            CacheService --> IntegrationService : Mis en cache
            deactivate CacheService
            
            IntegrationService --> Orchestrator : Données client mappées
            deactivate IntegrationService
            
        else Amplitude indisponible
            Amplitude --> IntegrationService : Error connexion
            deactivate Amplitude
            
            IntegrationService -> AuditService : logErrorConnexion()
            activate AuditService
            AuditService -> DB : INSERT audit_erreurs
            AuditService --> IntegrationService : OK
            deactivate AuditService
            
            IntegrationService --> Orchestrator : Error connexion
            deactivate IntegrationService
            
            Orchestrator --> Gateway : Service indisponible
            Gateway --> WebUI : Error connexion Amplitude
            WebUI --> Manager : **Error**: Service Amplitude\nindisponible
            
            note over Manager : Connexion Amplitude\néchec - Réessayer plus tard
        end
    end
    
    alt Données récupérées avec succès
        ' Vérification doublons
        Orchestrator -> DoublonService : rechercherDoublonAmplitude()
        activate DoublonService
        
        DoublonService -> DB : SELECT clients existants
        activate DB
        DB --> DoublonService : Résultats recherche
        deactivate DB
        
        DoublonService -> DoublonService : Analyze doublons\npotentiels
        
        alt Aucun doublon
            DoublonService --> Orchestrator : Pas de doublon
            deactivate DoublonService
            
            Orchestrator --> Gateway : Données prêtes
            Gateway --> WebUI : Affichage données récupérées
            WebUI --> Manager : **Données Amplitude**\nVisualization et vérification
            
            note over Manager : Données importées\naffichées pour validation
            
            == Validation et intégration ==
            
            Manager -> WebUI : Validate import données
            WebUI -> Gateway : POST /import/amplitude/confirm
            
            Gateway -> Orchestrator : confirmerImportAmplitude()
            
            Orchestrator -> ValidationService : validerDonneesCompletes()
            activate ValidationService
            
            ValidationService -> ValidationService : Verify complétude\ndes données
            ValidationService -> ValidationService : Control cohérence
            
            alt Données complètes et valides
                ValidationService --> Orchestrator : Validation OK
                deactivate ValidationService
                
                ' Création du client
                Orchestrator -> ClientService : creerClientDepuisAmplitude()
                activate ClientService
                
                ClientService -> DB : INSERT INTO clients
                activate DB
                DB --> ClientService : ID client généré
                deactivate DB
                
                ClientService -> DB : INSERT historique_import
                activate DB
                DB --> ClientService : Historique créé
                deactivate DB
                
                ClientService --> Orchestrator : Client créé (ID: ${clientId})
                deactivate ClientService
                
                ' Audit et notification
                Orchestrator -> AuditService : logImportReussi()
                activate AuditService
                AuditService -> DB : INSERT audit_actions
                AuditService --> Orchestrator : OK
                deactivate AuditService
                
                Orchestrator -> NotificationService : notifierImport()
                activate NotificationService
                NotificationService --> Orchestrator : Notification envoyée
                deactivate NotificationService
                
                Orchestrator --> Gateway : Import réussi
                Gateway --> WebUI : Confirmation intégration
                WebUI --> Manager : **Success**: Client importé\nID: ${clientId}
                
                note over Manager : Import Amplitude réussi\nClient intégré en base
                
            else Données incomplètes
                ValidationService --> Orchestrator : Données incomplètes
                deactivate ValidationService
                
                Orchestrator --> Gateway : Données à compléter
                Gateway --> WebUI : Formulaire complétion
                WebUI --> Manager : **Action requise**\nCompléter données manquantes
                
                note over Manager : Complétion manuelle\nrequise
            end
            
        else Doublon détecté
            DoublonService --> Orchestrator : Doublon trouvé
            deactivate DoublonService
            
            Orchestrator -> AuditService : logDoublonAmplitude()
            activate AuditService
            AuditService -> DB : INSERT audit_anomalies
            AuditService --> Orchestrator : OK
            deactivate AuditService
            
            Orchestrator --> Gateway : Doublon détecté
            Gateway --> WebUI : Client existe déjà
            WebUI --> Manager : **Attention**: Client déjà\nexistant en base
        end
    end
    
else Format identifiant invalide
    ValidationService --> Orchestrator : Format invalide
    deactivate ValidationService
    
    Orchestrator -> AuditService : logErrorFormat()
    activate AuditService
    AuditService -> DB : INSERT audit_erreurs
    AuditService --> Orchestrator : OK
    deactivate AuditService
    
    Orchestrator --> Gateway : Identifiant invalide
    Gateway --> WebUI : Format incorrect
    WebUI --> Manager : **Error**: Format identifiant\nincorrect
end

== Finalisation ==

Orchestrator -> FluxManager : terminerFluxImport()
FluxManager -> AuditService : logFinFlux()
activate AuditService
AuditService -> DB : UPDATE audit_flux
AuditService --> FluxManager : OK
deactivate AuditService

FluxManager --> Orchestrator : Flux terminé
deactivate FluxManager
deactivate Orchestrator

deactivate Gateway
deactivate WebUI
deactivate Manager

note over DB : Import Amplitude tracé\net audité pour conformité

@enduml
