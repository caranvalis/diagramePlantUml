@startuml UC005
skinparam backgroundColor #F8FBFF
skinparam participant {
    BackgroundColor #E3F2FD
    BorderColor #1976D2
    FontColor #0D47A1
}
skinparam sequence {
    ArrowColor #1976D2
    LifeLineBackgroundColor #E8F5E8
    LifeLineBorderColor #4CAF50
}
skinparam shadowing true


title UC005 - Génération Fiche Client PDF

' Acteurs externes
actor "Manager KYC" as Manager #LightBlue

' Couche présentation
box "Interface Utilisateur" #E8F5E8
    participant "Interface INTRA" as WebUI #90EE90
    participant "API Gateway" as Gateway #98FB98
end box

' Couche orchestration
box "Couche Orchestration" #FFF8DC
    participant "Orchestrateur\nKYC" as Orchestrator #FFE4B5
    participant "Manager\nFlux Métier" as FluxManager #F0E68C
end box

' Services métier
box "Services Métier KYC" #F0F8FF
    participant "Service\nClient" as ClientService #87CEEB
    participant "Service\nDocument" as DocumentService #4682B4
    participant "Service\nTemplate" as TemplateService #4169E1
    participant "Service\nPDF" as PDFService #87CEFA
end box

' Services techniques
box "Services Techniques" #FDF5E6
    participant "Service\nAudit" as AuditService #DEB887
    participant "Service\nNotification" as NotificationService #D2B48C
    participant "Cache\nRedis" as CacheService #CD853F
end box

' Infrastructure
box "Infrastructure" #F5F5F5
    participant "Base de Données\nKYC" as DB #C0C0C0
    participant "Stockage\nDocuments" as Storage #A9A9A9
    participant "Générateur\nPDF" as PDFEngine #A9A9A9
end box

== Initialisation génération fiche ==

Manager -> WebUI : Request génération\nfiche client
activate Manager
activate WebUI

WebUI -> Gateway : GET /client/{id}/fiche/generate
activate Gateway

Gateway -> Orchestrator : genererFicheClient()
activate Orchestrator

Orchestrator -> FluxManager : démarrerFluxGeneration()
activate FluxManager

FluxManager -> AuditService : logDébutGeneration()
activate AuditService
AuditService -> DB : INSERT audit_flux
AuditService --> FluxManager : OK
deactivate AuditService

FluxManager --> Orchestrator : Flux initialisé

' Vérification cache template
Orchestrator -> CacheService : getTemplateFiche()
activate CacheService

alt Template en cache
    CacheService --> Orchestrator : Template trouvé
    deactivate CacheService
    note over Orchestrator : Template récupéré\ndepuis le cache
    
else Template pas en cache
    CacheService --> Orchestrator : Non trouvé
    deactivate CacheService
    
    ' Récupération template depuis service
    Orchestrator -> TemplateService : chargerTemplateFiche()
    activate TemplateService
    
    TemplateService -> Storage : GET template_fiche_client.xml
    activate Storage
    
    alt Template disponible
        Storage --> TemplateService : Template chargé
        deactivate Storage
        
        TemplateService -> TemplateService : Validate structure\ntemplate
        TemplateService -> TemplateService : Compiler modèle
        
        TemplateService -> CacheService : cacheTemplate()
        activate CacheService
        CacheService --> TemplateService : Mis en cache
        deactivate CacheService
        
        TemplateService --> Orchestrator : Template prêt
        deactivate TemplateService
        
    else Template indisponible
        Storage --> TemplateService : Template non trouvé
        deactivate Storage
        
        TemplateService -> AuditService : logErrorTemplate()
        activate AuditService
        AuditService -> DB : INSERT audit_erreurs
        AuditService --> TemplateService : OK
        deactivate AuditService
        
        TemplateService --> Orchestrator : Template manquant
        deactivate TemplateService
        
        Orchestrator --> Gateway : Error template
        Gateway --> WebUI : Template indisponible
        WebUI --> Manager : **Error**: Modèle fiche\nindisponible
        
        note over Manager : Génération impossible\nTemplate manquant
    end
end

alt Template disponible
    == Collecte données client ==
    
    Orchestrator -> ClientService : collecterDonneesClient()
    activate ClientService
    
    ClientService -> DB : SELECT données_client
    activate DB
    DB --> ClientService : Informations client
    deactivate DB
    
    ClientService -> DocumentService : getDocumentsClient()
    activate DocumentService
    
    DocumentService -> DB : SELECT documents_associés
    activate DB
    DB --> DocumentService : Liste documents
    deactivate DB
    
    DocumentService -> Storage : getMetadonnésDocuments()
    activate Storage
    Storage --> DocumentService : Métadonnées complètes
    deactivate Storage
    
    DocumentService --> ClientService : Documents référencés
    deactivate DocumentService
    
    ClientService -> ClientService : Consolider données\nclient complètes
    ClientService --> Orchestrator : Dataset client complet
    deactivate ClientService
    
    == Génération PDF ==
    
    Orchestrator -> PDFService : genererFichePDF()
    activate PDFService
    
    PDFService -> TemplateService : getTemplateCompile()
    activate TemplateService
    TemplateService --> PDFService : Template compilé
    deactivate TemplateService
    
    PDFService -> PDFService : Fusionner données\navec template
    PDFService -> PDFService : Formater contenu\npour génération
    
    PDFService -> PDFEngine : Generate PDF
    activate PDFEngine
    
    alt Error génération PDF
        PDFEngine --> PDFService : Error écriture/format
        deactivate PDFEngine
        
        PDFService -> AuditService : logErrorGeneration()
        activate AuditService
        AuditService -> DB : INSERT audit_erreurs
        AuditService --> PDFService : OK
        deactivate AuditService
        
        PDFService --> Orchestrator : Génération échouée
        deactivate PDFService
        
        Orchestrator --> Gateway : Error PDF
        Gateway --> WebUI : Failure génération
        WebUI --> Manager : **Error**: Failure génération\nPDF - Réessayer
        
        note over Manager : Génération échouée\nProblème technique
        
    else Génération réussie
        PDFEngine --> PDFService : PDF généré
        deactivate PDFEngine
        
        PDFService -> Storage : Save PDF temporaire
        activate Storage
        Storage --> PDFService : URL PDF temporaire
        deactivate Storage
        
        PDFService -> DocumentService : enregistrerFicheGeneree()
        activate DocumentService
        
        DocumentService -> DB : INSERT document_genere
        activate DB
        DB --> DocumentService : Document référencé
        deactivate DB
        
        DocumentService --> PDFService : Fiche enregistrée
        deactivate DocumentService
        
        PDFService --> Orchestrator : PDF prêt (URL: ${pdfUrl})
        deactivate PDFService
        
        ' Audit et notification
        Orchestrator -> AuditService : logGenerationReussie()
        activate AuditService
        AuditService -> DB : INSERT audit_actions
        AuditService --> Orchestrator : OK
        deactivate AuditService
        
        Orchestrator -> NotificationService : notifierFichePrete()
        activate NotificationService
        NotificationService --> Orchestrator : Notification envoyée
        deactivate NotificationService
        
        Orchestrator --> Gateway : Fiche générée
        Gateway --> WebUI : PDF disponible
        WebUI --> Manager : **Fiche générée**\nOptions: Télécharger/Imprimer/Send
        
        note over Manager : Fiche client disponible\nActions possibles:\n- Télécharger\n- Imprimer\n- Send par email
        
        == Actions optionnelles ==
        
        opt Manager choisit une action
            alt Téléchargement
                Manager -> WebUI : Télécharger PDF
                WebUI -> Gateway : GET /fiche/{id}/download
                Gateway -> Storage : Récupérer PDF
                activate Storage
                Storage --> Gateway : Flux PDF
                deactivate Storage
                Gateway --> WebUI : PDF téléchargé
                WebUI --> Manager : **Fichier téléchargé**
                
            else Impression
                Manager -> WebUI : Imprimer PDF
                WebUI -> Gateway : POST /fiche/{id}/print
                Gateway -> PDFService : lancerImpression()
                activate PDFService
                PDFService --> Gateway : Impression lancée
                deactivate PDFService
                Gateway --> WebUI : Impression en cours
                WebUI --> Manager : **Impression lancée**
                
            else Envoi email
                Manager -> WebUI : Send par email
                WebUI -> Gateway : POST /fiche/{id}/send
                Gateway -> NotificationService : envoyerFicheEmail()
                activate NotificationService
                NotificationService --> Gateway : Email envoyé
                deactivate NotificationService
                Gateway --> WebUI : Email expédié
                WebUI --> Manager : **Email envoyé**
            end
        end
    end
end

== Finalisation ==

Orchestrator -> FluxManager : terminerFluxGeneration()
FluxManager -> AuditService : logFinFlux()
activate AuditService
AuditService -> DB : UPDATE audit_flux
AuditService --> FluxManager : OK
deactivate AuditService

FluxManager --> Orchestrator : Flux terminé
deactivate FluxManager
deactivate Orchestrator

deactivate Gateway
deactivate WebUI
deactivate Manager

note over Storage : Fiches PDF générées\net archivées pour\ntraçabilité et conformité

@enduml
