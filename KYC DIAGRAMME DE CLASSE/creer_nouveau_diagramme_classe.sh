#!/bin/bash

# ========================================
# Script de cr√©ation de nouveaux diagrammes de classe
# Bas√© sur le template standard minimaliste
# ========================================

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# R√©pertoire de base
BASE_DIR="/Users/caranvalis/Documents/test-plantuml/KYC DIAGRAMME DE CLASSE"
TEMPLATE_FILE="$BASE_DIR/TEMPLATE_STANDARD_CLASSE.puml"

# Fonction d'aide
show_help() {
    echo -e "${BLUE}========================================${NC}"
    echo -e "${BLUE}CR√âATEUR DE DIAGRAMMES DE CLASSE${NC}"
    echo -e "${BLUE}========================================${NC}"
    echo ""
    echo "Usage: $0 [OPTIONS] NOM_DIAGRAMME"
    echo ""
    echo "Options:"
    echo "  -h, --help      Afficher cette aide"
    echo "  -d, --dir DIR   R√©pertoire de destination (d√©faut: r√©pertoire courant)"
    echo "  -t, --title     Titre du diagramme (d√©faut: bas√© sur le nom)"
    echo ""
    echo "Exemples:"
    echo "  $0 DiagrammeGestionCompte"
    echo "  $0 -d ./nouveaux-diagrammes ModeleMetier"
    echo "  $0 -t \"Gestion des Utilisateurs\" DiagrammeUtilisateurs"
    echo ""
}

# Fonction pour cr√©er un nouveau diagramme
create_diagram() {
    local nom_diagramme="$1"
    local repertoire_dest="$2"
    local titre="$3"
    
    if [ -z "$nom_diagramme" ]; then
        echo -e "${RED}‚ùå Erreur: Nom du diagramme requis${NC}"
        show_help
        exit 1
    fi
    
    # V√©rifier que le template existe
    if [ ! -f "$TEMPLATE_FILE" ]; then
        echo -e "${RED}‚ùå Erreur: Template non trouv√© √† $TEMPLATE_FILE${NC}"
        exit 1
    fi
    
    # R√©pertoire de destination
    if [ -z "$repertoire_dest" ]; then
        repertoire_dest="."
    fi
    
    # Cr√©er le r√©pertoire si n√©cessaire
    mkdir -p "$repertoire_dest"
    
    # Nom du fichier
    fichier_dest="$repertoire_dest/${nom_diagramme}.puml"
    
    # V√©rifier si le fichier existe d√©j√†
    if [ -f "$fichier_dest" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Le fichier $fichier_dest existe d√©j√†${NC}"
        read -p "Voulez-vous l'√©craser ? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo -e "${BLUE}‚ÑπÔ∏è  Op√©ration annul√©e${NC}"
            exit 0
        fi
    fi
    
    # Titre par d√©faut
    if [ -z "$titre" ]; then
        titre="$nom_diagramme"
    fi
    
    # Cr√©er le nouveau diagramme
    echo -e "${BLUE}üìù Cr√©ation du diagramme: $nom_diagramme${NC}"
    
    cat > "$fichier_dest" << EOF
@startuml $nom_diagramme
' ========================================
' $titre
' Diagramme de classe g√©n√©r√© automatiquement
' Date de cr√©ation: $(date '+%d/%m/%Y √† %H:%M')
' ========================================

' Configuration du style minimaliste
skinparam linetype polyline
skinparam backgroundColor white
skinparam classBackgroundColor white
skinparam classBorderColor black
skinparam classFontColor black
skinparam classFontSize 12
skinparam classAttributeFontSize 11
skinparam classMethodFontSize 11
skinparam classAttributeIconSize 0
skinparam shadowing false
skinparam roundCorner 0
skinparam nodesep 50
skinparam ranksep 40
skinparam packageBackgroundColor white
skinparam packageBorderColor black
skinparam packageFontColor black

' Orientation du diagramme
left to right direction

' ========================================
' CLASSES DU DOMAINE
' ========================================

' TODO: Ajouter vos classes ici
' Exemple:
' class MaClasse {
'   - attributPrive: Type
'   + attributPublic: Type
'   + methodePublique(): Type
' }

' ========================================
' RELATIONS
' ========================================

' TODO: Ajouter vos relations ici
' Exemples:
' ClasseA "1" -- "0..*" ClasseB : relation
' ClasseC --|> ClasseA : h√©ritage
' ClasseD ..|> InterfaceE : impl√©mentation

@enduml
EOF
    
    echo -e "${GREEN}‚úÖ Diagramme cr√©√©: $fichier_dest${NC}"
    
    # G√©n√©rer le PNG automatiquement si PlantUML est disponible
    if command -v plantuml >/dev/null 2>&1; then
        echo -e "${BLUE}üñºÔ∏è  G√©n√©ration du PNG...${NC}"
        if plantuml "$fichier_dest"; then
            echo -e "${GREEN}‚úÖ PNG g√©n√©r√© avec succ√®s${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Erreur lors de la g√©n√©ration du PNG${NC}"
        fi
    else
        echo -e "${YELLOW}‚ÑπÔ∏è  PlantUML non disponible, PNG non g√©n√©r√©${NC}"
        echo -e "${BLUE}   Installez PlantUML pour la g√©n√©ration automatique des PNG${NC}"
    fi
    
    # Afficher le r√©sum√©
    echo ""
    echo -e "${BLUE}========================================${NC}"
    echo -e "${GREEN}üéâ DIAGRAMME CR√â√â AVEC SUCC√àS${NC}"
    echo -e "${BLUE}========================================${NC}"
    echo -e "üìÅ Fichier: $fichier_dest"
    echo -e "üìù Titre: $titre"
    echo -e "üìÖ Date: $(date '+%d/%m/%Y √† %H:%M')"
    echo ""
    echo -e "${BLUE}Prochaines √©tapes:${NC}"
    echo -e "1. √âditer le fichier PUML pour ajouter vos classes"
    echo -e "2. Ex√©cuter: plantuml $fichier_dest"
    echo -e "3. Ouvrir le PNG g√©n√©r√©"
    echo ""
}

# Parse des arguments
repertoire_dest=""
titre=""

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -d|--dir)
            repertoire_dest="$2"
            shift 2
            ;;
        -t|--title)
            titre="$2"
            shift 2
            ;;
        -*)
            echo -e "${RED}‚ùå Option inconnue: $1${NC}"
            show_help
            exit 1
            ;;
        *)
            nom_diagramme="$1"
            shift
            ;;
    esac
done

# Ex√©cuter la cr√©ation
create_diagram "$nom_diagramme" "$repertoire_dest" "$titre"
