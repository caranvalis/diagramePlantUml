@startuml DiagrammeClasseGeneralKYC
skinparam class {
    BackgroundColor #E0F7FA
    BorderColor #0097A7
}
skinparam linetype ortho

' --- Entités principales ---
class Client {
    -id : String
    +nom : String
    +prenom : String
    #dateNaissance : Date
    +type : String // particulier ou entreprise
    +statut : String
}

class Compte {
    -numero : String
    +rib : String
    +statut : String
    +dateOuverture : Date
    +dateCloture : Date
    +type : String
    +solde : Float
}

class Document {
    +id : String
    +type : String
    +dateDepot : Date
    +statut : String
}

class Actionnaire {
    +id : String
    +nom : String
    +pourcentage : Float
    +type : String // personne physique ou morale
}

' --- Utilisateurs, rôles et profils ---
class User {
    -id : String
    +login : String
    -motDePasse : String
    +email : String
}

class Role {
    +id : String
    +nom : String
    +description : String
}

class Profile {
    +id : String
    +nom : String
    +description : String
}

User "1" -- "1..*" Role : appartient 
Role "1" -- "0..*" Profile : définit 
User "1" -- "0..*" Client : gère 
User "1" -- "0..*" Parametre : paramètre 

' --- Paramétrage & Workflow ---
class Parametre {
    +id : String
    +nom : String
    +valeur : String
    +categorie : String
}

class TypeDocument {
    +code : String
    +libelle : String
}

class Workflow {
    +id : String
    +nom : String
}

class Etape {
    +id : String
    +nom : String
    +ordre : int
    +workflowId : String
}

class RegleControle {
    +id : String
    +type : String
    +actif : Boolean
    +parametres : String
}

class ParametreDynamique {
    +id : String
    +entite : String
    +cle : String
    +valeur : String
}

' --- Opérations/Services ---
class Preenregistrement {
    +datePreenregistrement : Date
    +canal : String // web, agence
}

class Enregistrement {
    +dateEnregistrement : Date
    +canal : String
}

class Modification {
    +dateModification : Date
    +champModifie : String
    +ancienneValeur : String
    +nouvelleValeur : String
}

' Fusion Blocage & Déblocage
class ActionBlocage {
    +id : String
    +dateAction : Date
    +typeAction : String // "blocage" ou "déblocage"
    +motif : String
    +cible : String // client ou compte
}

' --- Contrôles (fusion possible) ---
class Controle {
    +id : String
    +type : String // identité, conformité, etc.
    +statut : String
    +dateControle : Date
    +details : String
}

' --- Contrôle paramétrable et étapes dynamiques ---
class ControleType {
    +id : String
    +nom : String
    +description : String
}

class ControleEtape {
    +id : String
    +nom : String 
    +ordre : int
    +controleTypeId : String
    +parametres : String
}

class ControleEtapeInstance {
    +id : String
    +controleId : String
    +controleEtapeId : String
    +statut : String
    +dateDebut : Date
    +dateFin : Date
    +resultat : String
    +userId : String // Who
    +canal : String  // Where/How
}

' --- Gestion documentaire ---
class Documentation {
    +id : String
    +titre : String
    +description : String
    +type : String // procédure, guide, politique, etc.
    +dateCreation : Date
    +auteur : String
    +url : String
}

' --- Lien entre Documentation et les entités concernées ---
Documentation "0..*" -- "0..*" Client : concerne 
Documentation "0..*" -- "0..*" Compte : concerne 
Documentation "0..*" -- "0..*" ControleType : concerne 

' --- Relations principales (avec types UML) ---
Client *-- Compte : possède                 
Client o-- Actionnaire : possède          
Compte o-- TypeCompte : type               
Client o-- TypeClient : type 
Compte o-- Document : justificatif 
Client o-- Document : fournit 
Compte o-- Controle : contrôle 
Client o-- Controle : contrôle 

' --- Héritage (exemple) ---
Document <|-- TypeDocument : type

' --- Dépendances (faibles) ---
Client ..> ParametreDynamique : attribut dynamique 
Compte ..> ParametreDynamique : attribut dynamique 

' --- Dépendances fortes (utilisation) ---
Client --> Preenregistrement : pré-enregistre 
Client --> Enregistrement : enregistre 
Client --> Modification : modifie 
Client --> ActionBlocage : action blocage 
Compte --> Modification : modifie 
Compte --> ActionBlocage : action blocage 

' --- Paramétrage & workflow ---
Workflow *-- Etape : contient 
Etape o-- RegleControle : contrôle 

' --- Contrôle paramétrable ---
Controle "1" -- "1" ControleType : type 
ControleType *-- ControleEtape : étapes 
Controle o-- ControleEtapeInstance : exécution étape 
ControleEtape o-- ControleEtapeInstance : exécution 
ControleEtape ..> Parametre : paramètre 

' --- Notifications ---
Controle o-- Notification : notification 
ControleEtapeInstance o-- Notification : notification étape 

' --- Statut du client ---
Client o-- StatutClient : statut            

' Exemple : notification lors d'un changement de statut, d'une étape validée, etc.

abstract class AbstractControle {
    +id : String
    +dateCreation : Date
}

interface INotifiable {
    +notifier() : void
}

enum TypeNotification {
    EMAIL
    SMS
    INTERNE
}

annotation DocumentationMetier

Controle <|-- AbstractControle
Notification ..|> INotifiable
Notification -- TypeNotification
Controle .. DocumentationMetier

note right of Controle
    Classe centrale pour la gestion des contrôles KYC.
    Peut être spécialisée selon le type de contrôle.
end note
@enduml
