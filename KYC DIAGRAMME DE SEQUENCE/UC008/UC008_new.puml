@startuml UC008
!theme cerulean

title UC008 - Création Client Entreprise
skinparam actorStyle awesome
skinparam sequenceBoxBorderColor #1E88E5
skinparam participantBackgroundColor #E3F2FD
skinparam lifeline {
    BackgroundColor #BBDEFB
}

' Acteurs externes
actor "Gestionnaire KYC" as Gestionnaire #LightBlue

' Couche présentation
box "Interface Utilisateur" #E8F5E8
    participant "Interface INTRA" as WebUI #90EE90
    participant "API Gateway" as Gateway #98FB98
end box

' Couche orchestration
box "Couche Orchestration" #FFF8DC
    participant "Orchestrateur\nKYC" as Orchestrator #FFE4B5
    participant "Gestionnaire\nFlux Métier" as FluxManager #F0E68C
end box

' Services métier
box "Services Métier KYC" #F0F8FF
    participant "Service\nEntreprise" as EntrepriseService #87CEEB
    participant "Service\nValidation" as ValidationService #87CEFA
    participant "Service\nDocument" as DocumentService #4682B4
    participant "Service\nDoublon" as DoublonService #4169E1
    participant "Service\nSIRET" as SiretService #6495ED
end box

' Services techniques
box "Services Techniques" #FDF5E6
    participant "Service\nAudit" as AuditService #DEB887
    participant "Service\nNotification" as NotificationService #D2B48C
    participant "Cache\nRedis" as CacheService #CD853F
end box

' Infrastructure
box "Infrastructure" #F5F5F5
    participant "Base de Données\nKYC" as DB #C0C0C0
    participant "Stockage\nDocuments" as Storage #A9A9A9
    participant "API SIRENE" as APISirene #A9A9A9
end box

== Initialisation création entreprise ==

Gestionnaire -> WebUI : Sélectionner "Créer client\nentreprise"
activate Gestionnaire
activate WebUI

WebUI -> Gateway : GET /entreprise/create/form
activate Gateway

Gateway -> Orchestrator : initierCreationEntreprise()
activate Orchestrator

Orchestrator -> FluxManager : démarrerFluxCreationEntreprise()
activate FluxManager

FluxManager -> AuditService : logDébutFlux(CREATION_ENTREPRISE)
activate AuditService
AuditService -> DB : INSERT audit_flux
AuditService --> FluxManager : OK
deactivate AuditService

' Récupération formulaire
FluxManager -> CacheService : getFormulaireEntreprise()
activate CacheService

alt Formulaire en cache
    CacheService --> FluxManager : Formulaire trouvé
    deactivate CacheService
    
else Formulaire pas en cache
    CacheService --> FluxManager : Non trouvé
    deactivate CacheService
    
    FluxManager -> EntrepriseService : chargerFormulaireEntreprise()
    activate EntrepriseService
    
    EntrepriseService -> EntrepriseService : Générer formulaire\navec champs spécialisés entreprise
    EntrepriseService -> EntrepriseService : Ajouter validations\nbusiness rules
    
    EntrepriseService -> CacheService : cacheFormulaire()
    activate CacheService
    CacheService --> EntrepriseService : Mis en cache
    deactivate CacheService
    
    EntrepriseService --> FluxManager : Formulaire préparé
    deactivate EntrepriseService
end

FluxManager --> Orchestrator : Formulaire prêt
Orchestrator --> Gateway : Interface initialisée
Gateway --> WebUI : Formulaire entreprise
WebUI --> Gestionnaire : **Formulaire création entreprise**\nChamps spécialisés + documents

note over Gestionnaire : Formulaire affiché avec:\n- Informations légales\n- Représentants légaux\n- Documents obligatoires

== Saisie et soumission ==

Gestionnaire -> WebUI : Saisir données entreprise\n(SIRET, forme juridique, etc.)
Gestionnaire -> WebUI : Ajouter représentants légaux
Gestionnaire -> WebUI : Téléverser documents\n(K-bis, statuts, pouvoirs)
Gestionnaire -> WebUI : Valider création

WebUI -> Gateway : POST /entreprise/create/submit
note over Gateway : Données complètes\nentreprise + documents

Gateway -> Orchestrator : creerEntreprise()

' Validation initiale des données
Orchestrator -> ValidationService : validerDonneesEntreprise()
activate ValidationService

ValidationService -> ValidationService : Contrôler format SIRET
ValidationService -> ValidationService : Valider forme juridique
ValidationService -> ValidationService : Vérifier représentants légaux
ValidationService -> ValidationService : Contrôler cohérence

alt Données valides
    ValidationService --> Orchestrator : Validation OK
    deactivate ValidationService
    
    ' Vérification SIRET via API SIRENE
    Orchestrator -> SiretService : verifierSiretSirene()
    activate SiretService
    
    SiretService -> APISirene : GET /entreprise/{siret}
    activate APISirene
    
    alt SIRENE accessible
        APISirene --> SiretService : Données SIRENE
        deactivate APISirene
        
        SiretService -> SiretService : Valider correspondance\ndonnées saisies/SIRENE
        SiretService -> SiretService : Contrôler statut\nentreprise active
        
        alt Entreprise valide et active
            SiretService --> Orchestrator : SIRET validé
            deactivate SiretService
            
            ' Validation des documents
            Orchestrator -> DocumentService : validerDocumentsEntreprise()
            activate DocumentService
            
            DocumentService -> DocumentService : Vérifier documents\nobligatoires présents
            DocumentService -> DocumentService : Contrôler formats\net intégrité
            
            alt Documents valides
                DocumentService --> Orchestrator : Documents conformes
                deactivate DocumentService
                
                ' Vérification doublons
                Orchestrator -> DoublonService : rechercherDoublonEntreprise()
                activate DoublonService
                
                DoublonService -> DB : SELECT entreprises_existantes
                activate DB
                DB --> DoublonService : Résultats recherche
                deactivate DB
                
                DoublonService -> DoublonService : Analyser similitudes\n(SIRET, raison sociale)
                
                alt Aucun doublon
                    DoublonService --> Orchestrator : Pas de doublon
                    deactivate DoublonService
                    
                    ' Création de l'entreprise
                    Orchestrator -> EntrepriseService : creerNouvelleEntreprise()
                    activate EntrepriseService
                    
                    EntrepriseService -> DB : INSERT INTO entreprises
                    activate DB
                    DB --> EntrepriseService : ID entreprise généré
                    deactivate DB
                    
                    EntrepriseService -> DB : INSERT representants_legaux
                    activate DB
                    DB --> EntrepriseService : Représentants créés
                    deactivate DB
                    
                    EntrepriseService -> DocumentService : associerDocuments()
                    activate DocumentService
                    
                    DocumentService -> Storage : Sauvegarder documents
                    activate Storage
                    Storage --> DocumentService : URLs documents
                    deactivate Storage
                    
                    DocumentService -> DB : INSERT documents_entreprise
                    activate DB
                    DB --> DocumentService : Documents associés
                    deactivate DB
                    
                    DocumentService --> EntrepriseService : Documents liés
                    deactivate DocumentService
                    
                    EntrepriseService -> CacheService : cacheEntrepriseInfo()
                    activate CacheService
                    CacheService --> EntrepriseService : Mis en cache
                    deactivate CacheService
                    
                    EntrepriseService --> Orchestrator : Entreprise créée (ID: ${entrepriseId})
                    deactivate EntrepriseService
                    
                    ' Audit et notification
                    Orchestrator -> AuditService : logCreationEntreprise()
                    activate AuditService
                    AuditService -> DB : INSERT audit_actions
                    AuditService --> Orchestrator : OK
                    deactivate AuditService
                    
                    Orchestrator -> NotificationService : notifierCreationEntreprise()
                    activate NotificationService
                    NotificationService -> NotificationService : Préparer notifications\nreprésentants + équipes
                    NotificationService --> Orchestrator : Notifications envoyées
                    deactivate NotificationService
                    
                    Orchestrator --> Gateway : Création réussie
                    Gateway --> WebUI : Entreprise créée
                    WebUI --> Gestionnaire : **Succès**: Entreprise créée\nID: ${entrepriseId}
                    
                    note over Gestionnaire : Entreprise créée avec succès\nDocuments associés\nNotifications envoyées
                    
                else Doublon détecté
                    DoublonService --> Orchestrator : Entreprise existe
                    deactivate DoublonService
                    
                    Orchestrator -> AuditService : logTentativeDoublon()
                    activate AuditService
                    AuditService -> DB : INSERT audit_anomalies
                    AuditService --> Orchestrator : OK
                    deactivate AuditService
                    
                    Orchestrator --> Gateway : Doublon détecté
                    Gateway --> WebUI : Entreprise existante
                    WebUI --> Gestionnaire : **Erreur**: Entreprise déjà\nenregistrée avec ce SIRET
                end
                
            else Documents invalides ou corrompus
                DocumentService --> Orchestrator : Documents non conformes
                deactivate DocumentService
                
                Orchestrator -> AuditService : logErreurDocuments()
                activate AuditService
                AuditService -> DB : INSERT audit_erreurs
                AuditService --> Orchestrator : OK
                deactivate AuditService
                
                Orchestrator --> Gateway : Erreur documents
                Gateway --> WebUI : Documents invalides
                WebUI --> Gestionnaire : **Erreur**: Documents corrompus\nou manquants - Corriger
            end
            
        else Entreprise inactive ou invalide
            SiretService --> Orchestrator : SIRET invalide
            deactivate SiretService
            
            Orchestrator -> AuditService : logSiretInvalide()
            activate AuditService
            AuditService -> DB : INSERT audit_erreurs
            AuditService --> Orchestrator : OK
            deactivate AuditService
            
            Orchestrator --> Gateway : SIRET invalide
            Gateway --> WebUI : Entreprise inactive
            WebUI --> Gestionnaire : **Erreur**: Entreprise inactive\nou SIRET invalide
        end
        
    else SIRENE indisponible
        APISirene --> SiretService : Service indisponible
        deactivate APISirene
        
        SiretService -> AuditService : logErreurSirene()
        activate AuditService
        AuditService -> DB : INSERT audit_erreurs
        AuditService --> SiretService : OK
        deactivate AuditService
        
        SiretService --> Orchestrator : Vérification impossible
        deactivate SiretService
        
        Orchestrator --> Gateway : Service SIRENE indisponible
        Gateway --> WebUI : Vérification SIRET impossible
        WebUI --> Gestionnaire : **Attention**: Service SIRENE\nindisponible - Vérification manuelle requise
    end
    
else Données invalides
    ValidationService --> Orchestrator : Données incorrectes
    deactivate ValidationService
    
    Orchestrator -> AuditService : logErreurValidation()
    activate AuditService
    AuditService -> DB : INSERT audit_erreurs
    AuditService --> Orchestrator : OK
    deactivate AuditService
    
    Orchestrator --> Gateway : Erreur validation
    Gateway --> WebUI : Données non conformes
    WebUI --> Gestionnaire : **Erreur**: Données incorrectes\nCorrections requises
end

== Finalisation ==

Orchestrator -> FluxManager : terminerFluxCreationEntreprise()
FluxManager -> AuditService : logFinFlux()
activate AuditService
AuditService -> DB : UPDATE audit_flux
AuditService --> FluxManager : OK
deactivate AuditService

FluxManager --> Orchestrator : Flux terminé
deactivate FluxManager
deactivate Orchestrator

deactivate Gateway
deactivate WebUI
deactivate Gestionnaire

note over DB : Création entreprise tracée\navec vérifications SIRENE\net validation documents

@enduml
