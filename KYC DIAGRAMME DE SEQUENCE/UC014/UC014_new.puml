@startuml UC014
!theme cerulean

title UC014 - Modification Informations Client
skinparam actorStyle awesome
skinparam sequenceBoxBorderColor #1E88E5
skinparam participantBackgroundColor #E3F2FD
skinparam lifeline {
    BackgroundColor #BBDEFB
}

' Acteurs externes
actor "Gestionnaire KYC" as Gestionnaire #LightBlue

' Couche présentation
box "Interface Utilisateur" #E8F5E8
    participant "Interface INTRA" as WebUI #90EE90
    participant "API Gateway" as Gateway #98FB98
end box

' Couche orchestration
box "Couche Orchestration" #FFF8DC
    participant "Orchestrateur\nKYC" as Orchestrator #FFE4B5
    participant "Gestionnaire\nFlux Métier" as FluxManager #F0E68C
end box

' Services métier
box "Services Métier KYC" #F0F8FF
    participant "Service\nClient" as ClientService #87CEEB
    participant "Service\nValidation" as ValidationService #87CEFA
    participant "Service\nHistorique" as HistoriqueService #4682B4
    participant "Service\nDoublon" as DoublonService #4169E1
end box

' Services techniques
box "Services Techniques" #FDF5E6
    participant "Service\nAudit" as AuditService #DEB887
    participant "Service\nNotification" as NotificationService #D2B48C
    participant "Cache\nRedis" as CacheService #CD853F
end box

' Infrastructure
box "Infrastructure" #F5F5F5
    participant "Base de Données\nKYC" as DB #C0C0C0
end box

== Accès fiche client ==

Gestionnaire -> WebUI : Accéder fiche client\npour modification
activate Gestionnaire
activate WebUI

WebUI -> Gateway : GET /client/{id}/edit
activate Gateway

Gateway -> Orchestrator : accederModificationClient()
activate Orchestrator

Orchestrator -> FluxManager : démarrerFluxModificationClient()
activate FluxManager

FluxManager -> AuditService : logDébutFlux(MODIFICATION_CLIENT)
activate AuditService
AuditService -> DB : INSERT audit_flux
AuditService --> FluxManager : OK
deactivate AuditService

Orchestrator -> ClientService : chargerDonneesClient()
activate ClientService

ClientService -> CacheService : getClientInfo()
activate CacheService

alt Client en cache
    CacheService --> ClientService : Données trouvées
    deactivate CacheService
    
else Pas en cache
    CacheService --> ClientService : Non trouvé
    deactivate CacheService
    
    ClientService -> DB : SELECT client_details
    activate DB
    DB --> ClientService : Données client
    deactivate DB
    
    ClientService -> CacheService : cacheClientInfo()
    activate CacheService
    CacheService --> ClientService : Mis en cache
    deactivate CacheService
end

ClientService --> Orchestrator : Fiche client chargée
deactivate ClientService

Orchestrator --> Gateway : Données disponibles
Gateway --> WebUI : Fiche client
WebUI --> Gestionnaire : **Fiche client**\nMode modification activé

== Modification des informations ==

Gestionnaire -> WebUI : Modifier informations\n(adresse, téléphone, etc.)
Gestionnaire -> WebUI : Valider modifications

WebUI -> Gateway : PUT /client/{id}/update

Gateway -> Orchestrator : modifierInformationsClient()

Orchestrator -> ValidationService : validerNouvellesDonnees()
activate ValidationService

ValidationService -> ValidationService : Contrôler format\nnouvelles données
ValidationService -> ValidationService : Valider cohérence\nmodifications

alt Erreur de format
    ValidationService --> Orchestrator : Format invalide
    deactivate ValidationService
    
    Orchestrator --> Gateway : Erreur validation
    Gateway --> WebUI : Message bloquant
    WebUI --> Gestionnaire : **Erreur**: Format incorrect\nCorrection requise
    
else Format valide
    ValidationService --> Orchestrator : Données valides
    deactivate ValidationService
    
    Orchestrator -> DoublonService : verifierDoublonModification()
    activate DoublonService
    
    DoublonService -> DB : SELECT clients_similaires
    activate DB
    DB --> DoublonService : Résultats recherche
    deactivate DB
    
    DoublonService -> DoublonService : Analyser risque\ndoublon avec modifications
    
    alt Risque doublon détecté
        DoublonService --> Orchestrator : Doublon potentiel
        deactivate DoublonService
        
        Orchestrator -> AuditService : logRisqueDoublon()
        activate AuditService
        AuditService -> DB : INSERT audit_anomalies
        AuditService --> Orchestrator : OK
        deactivate AuditService
        
        Orchestrator --> Gateway : Validation échoue
        Gateway --> WebUI : Modification annulée
        WebUI --> Gestionnaire : **Erreur**: Risque doublon\nModification annulée
        
    else Pas de risque doublon
        DoublonService --> Orchestrator : Validation OK
        deactivate DoublonService
        
        ' Enregistrement historique AVANT modification
        Orchestrator -> HistoriqueService : sauvegarderEtatAvant()
        activate HistoriqueService
        
        HistoriqueService -> DB : INSERT historique_modifications
        activate DB
        DB --> HistoriqueService : Historique créé
        deactivate DB
        
        HistoriqueService --> Orchestrator : État sauvegardé
        deactivate HistoriqueService
        
        ' Mise à jour des données
        Orchestrator -> ClientService : mettreAJourDonnees()
        activate ClientService
        
        ClientService -> DB : UPDATE client SET nouvelles_donnees
        activate DB
        DB --> ClientService : Données mises à jour
        deactivate DB
        
        ClientService -> CacheService : invalidateClientCache()
        activate CacheService
        CacheService --> ClientService : Cache invalidé
        deactivate CacheService
        
        ClientService --> Orchestrator : Client mis à jour
        deactivate ClientService
        
        ' Enregistrement historique APRÈS modification
        Orchestrator -> HistoriqueService : enregistrerModification()
        activate HistoriqueService
        
        HistoriqueService -> DB : UPDATE historique_modifications
        activate DB
        DB --> HistoriqueService : Modification tracée
        deactivate DB
        
        HistoriqueService --> Orchestrator : Historique complet
        deactivate HistoriqueService
        
        ' Audit et notification
        Orchestrator -> AuditService : logModificationReussie()
        activate AuditService
        AuditService -> DB : INSERT audit_actions
        AuditService --> Orchestrator : OK
        deactivate AuditService
        
        Orchestrator -> NotificationService : notifierModification()
        activate NotificationService
        NotificationService --> Orchestrator : Notification envoyée
        deactivate NotificationService
        
        Orchestrator --> Gateway : Modification réussie
        Gateway --> WebUI : Confirmation mise à jour
        WebUI --> Gestionnaire : **Succès**: Informations\nclient mises à jour
    end
end

== Finalisation ==

Orchestrator -> FluxManager : terminerFluxModificationClient()
FluxManager -> AuditService : logFinFlux()
activate AuditService
AuditService -> DB : UPDATE audit_flux
AuditService --> FluxManager : OK
deactivate AuditService

FluxManager --> Orchestrator : Flux terminé
deactivate FluxManager
deactivate Orchestrator

deactivate Gateway
deactivate WebUI
deactivate Gestionnaire

@enduml
